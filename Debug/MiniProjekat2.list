
MiniProjekat2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000442c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f8  080045f8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080045f8  080045f8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045f8  080045f8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000048  08004648  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08004648  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e46b  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de0  00000000  00000000  0002e51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  00030300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb2  00000000  00000000  000311b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175bf  00000000  00000000  00031d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011066  00000000  00000000  00049321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089bb2  00000000  00000000  0005a387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004114  00000000  00000000  000e3f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e8050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000048 	.word	0x20000048
 800012c:	00000000 	.word	0x00000000
 8000130:	08004524 	.word	0x08004524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000004c 	.word	0x2000004c
 800014c:	08004524 	.word	0x08004524

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2f>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000834:	bf24      	itt	cs
 8000836:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800083a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800083e:	d90d      	bls.n	800085c <__aeabi_d2f+0x30>
 8000840:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000844:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000848:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800084c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000850:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000860:	d121      	bne.n	80008a6 <__aeabi_d2f+0x7a>
 8000862:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000866:	bfbc      	itt	lt
 8000868:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800086c:	4770      	bxlt	lr
 800086e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000872:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000876:	f1c2 0218 	rsb	r2, r2, #24
 800087a:	f1c2 0c20 	rsb	ip, r2, #32
 800087e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000882:	fa20 f002 	lsr.w	r0, r0, r2
 8000886:	bf18      	it	ne
 8000888:	f040 0001 	orrne.w	r0, r0, #1
 800088c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000890:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000894:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000898:	ea40 000c 	orr.w	r0, r0, ip
 800089c:	fa23 f302 	lsr.w	r3, r3, r2
 80008a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008a4:	e7cc      	b.n	8000840 <__aeabi_d2f+0x14>
 80008a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008aa:	d107      	bne.n	80008bc <__aeabi_d2f+0x90>
 80008ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008b0:	bf1e      	ittt	ne
 80008b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ba:	4770      	bxne	lr
 80008bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <__aeabi_frsub>:
 80008cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008d0:	e002      	b.n	80008d8 <__addsf3>
 80008d2:	bf00      	nop

080008d4 <__aeabi_fsub>:
 80008d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008d8 <__addsf3>:
 80008d8:	0042      	lsls	r2, r0, #1
 80008da:	bf1f      	itttt	ne
 80008dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008e0:	ea92 0f03 	teqne	r2, r3
 80008e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008ec:	d06a      	beq.n	80009c4 <__addsf3+0xec>
 80008ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008f6:	bfc1      	itttt	gt
 80008f8:	18d2      	addgt	r2, r2, r3
 80008fa:	4041      	eorgt	r1, r0
 80008fc:	4048      	eorgt	r0, r1
 80008fe:	4041      	eorgt	r1, r0
 8000900:	bfb8      	it	lt
 8000902:	425b      	neglt	r3, r3
 8000904:	2b19      	cmp	r3, #25
 8000906:	bf88      	it	hi
 8000908:	4770      	bxhi	lr
 800090a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800090e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000912:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800091e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000922:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000926:	bf18      	it	ne
 8000928:	4249      	negne	r1, r1
 800092a:	ea92 0f03 	teq	r2, r3
 800092e:	d03f      	beq.n	80009b0 <__addsf3+0xd8>
 8000930:	f1a2 0201 	sub.w	r2, r2, #1
 8000934:	fa41 fc03 	asr.w	ip, r1, r3
 8000938:	eb10 000c 	adds.w	r0, r0, ip
 800093c:	f1c3 0320 	rsb	r3, r3, #32
 8000940:	fa01 f103 	lsl.w	r1, r1, r3
 8000944:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000948:	d502      	bpl.n	8000950 <__addsf3+0x78>
 800094a:	4249      	negs	r1, r1
 800094c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000950:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000954:	d313      	bcc.n	800097e <__addsf3+0xa6>
 8000956:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800095a:	d306      	bcc.n	800096a <__addsf3+0x92>
 800095c:	0840      	lsrs	r0, r0, #1
 800095e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000962:	f102 0201 	add.w	r2, r2, #1
 8000966:	2afe      	cmp	r2, #254	; 0xfe
 8000968:	d251      	bcs.n	8000a0e <__addsf3+0x136>
 800096a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800096e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000972:	bf08      	it	eq
 8000974:	f020 0001 	biceq.w	r0, r0, #1
 8000978:	ea40 0003 	orr.w	r0, r0, r3
 800097c:	4770      	bx	lr
 800097e:	0049      	lsls	r1, r1, #1
 8000980:	eb40 0000 	adc.w	r0, r0, r0
 8000984:	3a01      	subs	r2, #1
 8000986:	bf28      	it	cs
 8000988:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800098c:	d2ed      	bcs.n	800096a <__addsf3+0x92>
 800098e:	fab0 fc80 	clz	ip, r0
 8000992:	f1ac 0c08 	sub.w	ip, ip, #8
 8000996:	ebb2 020c 	subs.w	r2, r2, ip
 800099a:	fa00 f00c 	lsl.w	r0, r0, ip
 800099e:	bfaa      	itet	ge
 80009a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009a4:	4252      	neglt	r2, r2
 80009a6:	4318      	orrge	r0, r3
 80009a8:	bfbc      	itt	lt
 80009aa:	40d0      	lsrlt	r0, r2
 80009ac:	4318      	orrlt	r0, r3
 80009ae:	4770      	bx	lr
 80009b0:	f092 0f00 	teq	r2, #0
 80009b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009b8:	bf06      	itte	eq
 80009ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009be:	3201      	addeq	r2, #1
 80009c0:	3b01      	subne	r3, #1
 80009c2:	e7b5      	b.n	8000930 <__addsf3+0x58>
 80009c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009cc:	bf18      	it	ne
 80009ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d2:	d021      	beq.n	8000a18 <__addsf3+0x140>
 80009d4:	ea92 0f03 	teq	r2, r3
 80009d8:	d004      	beq.n	80009e4 <__addsf3+0x10c>
 80009da:	f092 0f00 	teq	r2, #0
 80009de:	bf08      	it	eq
 80009e0:	4608      	moveq	r0, r1
 80009e2:	4770      	bx	lr
 80009e4:	ea90 0f01 	teq	r0, r1
 80009e8:	bf1c      	itt	ne
 80009ea:	2000      	movne	r0, #0
 80009ec:	4770      	bxne	lr
 80009ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80009f2:	d104      	bne.n	80009fe <__addsf3+0x126>
 80009f4:	0040      	lsls	r0, r0, #1
 80009f6:	bf28      	it	cs
 80009f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009fc:	4770      	bx	lr
 80009fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a02:	bf3c      	itt	cc
 8000a04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bxcc	lr
 8000a0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a16:	4770      	bx	lr
 8000a18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a1c:	bf16      	itet	ne
 8000a1e:	4608      	movne	r0, r1
 8000a20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a24:	4601      	movne	r1, r0
 8000a26:	0242      	lsls	r2, r0, #9
 8000a28:	bf06      	itte	eq
 8000a2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a2e:	ea90 0f01 	teqeq	r0, r1
 8000a32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_ui2f>:
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	e004      	b.n	8000a48 <__aeabi_i2f+0x8>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_i2f>:
 8000a40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a44:	bf48      	it	mi
 8000a46:	4240      	negmi	r0, r0
 8000a48:	ea5f 0c00 	movs.w	ip, r0
 8000a4c:	bf08      	it	eq
 8000a4e:	4770      	bxeq	lr
 8000a50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a54:	4601      	mov	r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	e01c      	b.n	8000a96 <__aeabi_l2f+0x2a>

08000a5c <__aeabi_ul2f>:
 8000a5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a60:	bf08      	it	eq
 8000a62:	4770      	bxeq	lr
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	e00a      	b.n	8000a80 <__aeabi_l2f+0x14>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_l2f>:
 8000a6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a70:	bf08      	it	eq
 8000a72:	4770      	bxeq	lr
 8000a74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a78:	d502      	bpl.n	8000a80 <__aeabi_l2f+0x14>
 8000a7a:	4240      	negs	r0, r0
 8000a7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a80:	ea5f 0c01 	movs.w	ip, r1
 8000a84:	bf02      	ittt	eq
 8000a86:	4684      	moveq	ip, r0
 8000a88:	4601      	moveq	r1, r0
 8000a8a:	2000      	moveq	r0, #0
 8000a8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a90:	bf08      	it	eq
 8000a92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a9a:	fabc f28c 	clz	r2, ip
 8000a9e:	3a08      	subs	r2, #8
 8000aa0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000aa4:	db10      	blt.n	8000ac8 <__aeabi_l2f+0x5c>
 8000aa6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aaa:	4463      	add	r3, ip
 8000aac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ab0:	f1c2 0220 	rsb	r2, r2, #32
 8000ab4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ab8:	fa20 f202 	lsr.w	r2, r0, r2
 8000abc:	eb43 0002 	adc.w	r0, r3, r2
 8000ac0:	bf08      	it	eq
 8000ac2:	f020 0001 	biceq.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	f102 0220 	add.w	r2, r2, #32
 8000acc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ad0:	f1c2 0220 	rsb	r2, r2, #32
 8000ad4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ad8:	fa21 f202 	lsr.w	r2, r1, r2
 8000adc:	eb43 0002 	adc.w	r0, r3, r2
 8000ae0:	bf08      	it	eq
 8000ae2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ae6:	4770      	bx	lr

08000ae8 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // CNT se setuje na 0
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <delay_us+0x2c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // Ceka se da CNT dostigne zadatu vrednost
 8000afa:	bf00      	nop
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <delay_us+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3f9      	bcc.n	8000afc <delay_us+0x14>
}
 8000b08:	bf00      	nop
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	200000b8 	.word	0x200000b8

08000b18 <zagrevanje>:

void zagrevanje(float temperatura){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val;
	double temp_c;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b26:	4849      	ldr	r0, [pc, #292]	; (8000c4c <zagrevanje+0x134>)
 8000b28:	f001 f829 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	4846      	ldr	r0, [pc, #280]	; (8000c4c <zagrevanje+0x134>)
 8000b34:	f001 f823 	bl	8001b7e <HAL_GPIO_WritePin>

	do {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	4843      	ldr	r0, [pc, #268]	; (8000c4c <zagrevanje+0x134>)
 8000b3e:	f001 f836 	bl	8001bae <HAL_GPIO_TogglePin>
		delay_us(10);
 8000b42:	200a      	movs	r0, #10
 8000b44:	f7ff ffd0 	bl	8000ae8 <delay_us>


		buf[0] = REG_TEMP;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	723b      	strb	r3, [r7, #8]
		ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000b4c:	2390      	movs	r3, #144	; 0x90
 8000b4e:	b299      	uxth	r1, r3
 8000b50:	f107 0208 	add.w	r2, r7, #8
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	483c      	ldr	r0, [pc, #240]	; (8000c50 <zagrevanje+0x138>)
 8000b5e:	f001 f983 	bl	8001e68 <HAL_I2C_Master_Transmit>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
		if ( ret != HAL_OK ) {
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d009      	beq.n	8000b80 <zagrevanje+0x68>
			strcpy((char*)buf, "Error Tx\r\n");
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	4a38      	ldr	r2, [pc, #224]	; (8000c54 <zagrevanje+0x13c>)
 8000b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b74:	c303      	stmia	r3!, {r0, r1}
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	3302      	adds	r3, #2
 8000b7a:	0c12      	lsrs	r2, r2, #16
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	e03b      	b.n	8000bf8 <zagrevanje+0xe0>
		} else {

			// Citanje 2 bita iz registra temperaturnog senzora
			ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000b80:	2390      	movs	r3, #144	; 0x90
 8000b82:	b299      	uxth	r1, r3
 8000b84:	f107 0208 	add.w	r2, r7, #8
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2302      	movs	r3, #2
 8000b90:	482f      	ldr	r0, [pc, #188]	; (8000c50 <zagrevanje+0x138>)
 8000b92:	f001 fa67 	bl	8002064 <HAL_I2C_Master_Receive>
 8000b96:	4603      	mov	r3, r0
 8000b98:	75fb      	strb	r3, [r7, #23]
			if ( ret != HAL_OK ) {
 8000b9a:	7dfb      	ldrb	r3, [r7, #23]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d009      	beq.n	8000bb4 <zagrevanje+0x9c>
				strcpy((char*)buf, "Error Rx\r\n");
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4a2c      	ldr	r2, [pc, #176]	; (8000c58 <zagrevanje+0x140>)
 8000ba6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ba8:	c303      	stmia	r3!, {r0, r1}
 8000baa:	801a      	strh	r2, [r3, #0]
 8000bac:	3302      	adds	r3, #2
 8000bae:	0c12      	lsrs	r2, r2, #16
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	e021      	b.n	8000bf8 <zagrevanje+0xe0>
			} else {

				// Kombinujemo bitove kako bismo dobili 12-bitnu vrednost
				val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000bb4:	7a3b      	ldrb	r3, [r7, #8]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	7a7b      	ldrb	r3, [r7, #9]
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	84fb      	strh	r3, [r7, #38]	; 0x26

				// Konvertujemo u drugi komplement, temperatura moze da bude i negativna
				if ( val > 0x7FF ) {
 8000bc6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bce:	db05      	blt.n	8000bdc <zagrevanje+0xc4>
					val |= 0xF000;
 8000bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bd2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000bd6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000bda:	84fb      	strh	r3, [r7, #38]	; 0x26
				}

				// Konvertujemo u decimalni format
				temp_c = val * 0.0625;
 8000bdc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fd31 	bl	8000648 <__aeabi_i2d>
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <zagrevanje+0x144>)
 8000bec:	f7ff fab0 	bl	8000150 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			}
		}
	} while(temp_c < (temperatura - 1) || temp_c > (temperatura + 1));
 8000bf8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fe69 	bl	80008d4 <__aeabi_fsub>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fd31 	bl	800066c <__aeabi_f2d>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c12:	f7ff fde3 	bl	80007dc <__aeabi_dcmplt>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d18d      	bne.n	8000b38 <zagrevanje+0x20>
 8000c1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fe59 	bl	80008d8 <__addsf3>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd1f 	bl	800066c <__aeabi_f2d>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	460b      	mov	r3, r1
 8000c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c36:	f7ff fdef 	bl	8000818 <__aeabi_dcmpgt>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f47f af7b 	bne.w	8000b38 <zagrevanje+0x20>
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40010800 	.word	0x40010800
 8000c50:	20000064 	.word	0x20000064
 8000c54:	0800453c 	.word	0x0800453c
 8000c58:	08004548 	.word	0x08004548
 8000c5c:	3fb00000 	.word	0x3fb00000

08000c60 <vracanjeNultiPolozaj>:

void vracanjeNultiPolozaj(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	int nulti;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6c:	4816      	ldr	r0, [pc, #88]	; (8000cc8 <vracanjeNultiPolozaj+0x68>)
 8000c6e:	f000 ff86 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <vracanjeNultiPolozaj+0x68>)
 8000c7a:	f000 ff80 	bl	8001b7e <HAL_GPIO_WritePin>

	do{
		nulti = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <vracanjeNultiPolozaj+0x6c>)
 8000c82:	f000 ff65 	bl	8001b50 <HAL_GPIO_ReadPin>
 8000c86:	4603      	mov	r3, r0
 8000c88:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < 53; i++){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e00b      	b.n	8000ca8 <vracanjeNultiPolozaj+0x48>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <vracanjeNultiPolozaj+0x68>)
 8000c96:	f000 ff8a 	bl	8001bae <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8000c9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9e:	f000 fbf7 	bl	8001490 <HAL_Delay>
		for(int i = 0; i < 53; i++){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b34      	cmp	r3, #52	; 0x34
 8000cac:	ddf0      	ble.n	8000c90 <vracanjeNultiPolozaj+0x30>
		}
	}while(nulti != 0);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1e4      	bne.n	8000c7e <vracanjeNultiPolozaj+0x1e>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <vracanjeNultiPolozaj+0x68>)
 8000cbc:	f000 ff5f 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <rotiraj>:

void rotiraj(int brojKoraka, int smer){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	if(smer == 1){
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d106      	bne.n	8000cee <rotiraj+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <rotiraj+0x78>)
 8000ce8:	f000 ff49 	bl	8001b7e <HAL_GPIO_WritePin>
 8000cec:	e005      	b.n	8000cfa <rotiraj+0x2a>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf4:	4814      	ldr	r0, [pc, #80]	; (8000d48 <rotiraj+0x78>)
 8000cf6:	f000 ff42 	bl	8001b7e <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <rotiraj+0x78>)
 8000d02:	f000 ff3c 	bl	8001b7e <HAL_GPIO_WritePin>

	for(int i = 0; i < 53 * brojKoraka; i++){
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e00b      	b.n	8000d24 <rotiraj+0x54>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <rotiraj+0x78>)
 8000d12:	f000 ff4c 	bl	8001bae <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000d16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d1a:	f000 fbb9 	bl	8001490 <HAL_Delay>
	for(int i = 0; i < 53 * brojKoraka; i++){
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2235      	movs	r2, #53	; 0x35
 8000d28:	fb02 f303 	mul.w	r3, r2, r3
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbec      	blt.n	8000d0c <rotiraj+0x3c>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <rotiraj+0x78>)
 8000d3a:	f000 ff20 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40010800 	.word	0x40010800

08000d4c <izbaci>:

void izbaci(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <izbaci+0x54>)
 8000d5a:	f000 ff10 	bl	8001b7e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <izbaci+0x54>)
 8000d66:	f000 ff0a 	bl	8001b7e <HAL_GPIO_WritePin>

	for(int i = 0; i < 200; i++){
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	e00a      	b.n	8000d86 <izbaci+0x3a>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <izbaci+0x54>)
 8000d76:	f000 ff1a 	bl	8001bae <HAL_GPIO_TogglePin>
		HAL_Delay(250);
 8000d7a:	20fa      	movs	r0, #250	; 0xfa
 8000d7c:	f000 fb88 	bl	8001490 <HAL_Delay>
	for(int i = 0; i < 200; i++){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3301      	adds	r3, #1
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2bc7      	cmp	r3, #199	; 0xc7
 8000d8a:	ddf1      	ble.n	8000d70 <izbaci+0x24>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <izbaci+0x54>)
 8000d94:	f000 fef3 	bl	8001b7e <HAL_GPIO_WritePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40010800 	.word	0x40010800
 8000da4:	00000000 	.word	0x00000000

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dae:	f000 fb0d 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db2:	f000 f875 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db6:	f000 f957 	bl	8001068 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000dba:	f000 f8db 	bl	8000f74 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000dbe:	f000 f8ab 	bl	8000f18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000dc2:	f000 f927 	bl	8001014 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000dc6:	4830      	ldr	r0, [pc, #192]	; (8000e88 <main+0xe0>)
 8000dc8:	f002 fb9e 	bl	8003508 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	492f      	ldr	r1, [pc, #188]	; (8000e8c <main+0xe4>)
 8000dd0:	482f      	ldr	r0, [pc, #188]	; (8000e90 <main+0xe8>)
 8000dd2:	f002 fe3b 	bl	8003a4c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	double temperatura = 75.00;
 8000dd6:	a32a      	add	r3, pc, #168	; (adr r3, 8000e80 <main+0xd8>)
 8000dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ddc:	e9c7 2300 	strd	r2, r3, [r7]
	zagrevanje(temperatura);
 8000de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000de4:	f7ff fd22 	bl	800082c <__aeabi_d2f>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fe94 	bl	8000b18 <zagrevanje>
	vracanjeNultiPolozaj();
 8000df0:	f7ff ff36 	bl	8000c60 <vracanjeNultiPolozaj>

	int zeljenaSupstanca = 5;
 8000df4:	2305      	movs	r3, #5
 8000df6:	617b      	str	r3, [r7, #20]
	int smer = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]

	// Citanje zeljene supstance

	if (RX1_Char >= '0' && RX1_Char <= '4') {
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <main+0xe4>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b2f      	cmp	r3, #47	; 0x2f
 8000e02:	d90f      	bls.n	8000e24 <main+0x7c>
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <main+0xe4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b34      	cmp	r3, #52	; 0x34
 8000e0a:	d80b      	bhi.n	8000e24 <main+0x7c>
	    zeljenaSupstanca = RX1_Char - '0';
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <main+0xe4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b30      	subs	r3, #48	; 0x30
 8000e12:	617b      	str	r3, [r7, #20]
	    HAL_UART_Receive_IT(&huart1, &RX1_Char, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	491d      	ldr	r1, [pc, #116]	; (8000e8c <main+0xe4>)
 8000e18:	481d      	ldr	r0, [pc, #116]	; (8000e90 <main+0xe8>)
 8000e1a:	f002 fe17 	bl	8003a4c <HAL_UART_Receive_IT>
	    RX1_Char = 0x00;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <main+0xe4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
	}

	for(int i = 0; i < 15; i++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	e024      	b.n	8000e74 <main+0xcc>
		if(nizSupstance[i] == zeljenaSupstanca && isThere[i]){
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <main+0xec>)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d11a      	bne.n	8000e6e <main+0xc6>
 8000e38:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <main+0xf0>)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d014      	beq.n	8000e6e <main+0xc6>
			if(i > 7){
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	dd01      	ble.n	8000e4e <main+0xa6>
				smer = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
			}

			rotiraj(razdaljine[i], smer);
 8000e4e:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <main+0xf4>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	6939      	ldr	r1, [r7, #16]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff39 	bl	8000cd0 <rotiraj>
			izbaci();
 8000e5e:	f7ff ff75 	bl	8000d4c <izbaci>
			isThere[i] = 0;
 8000e62:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <main+0xf0>)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2100      	movs	r1, #0
 8000e68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000e6c:	e005      	b.n	8000e7a <main+0xd2>
	for(int i = 0; i < 15; i++){
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b0e      	cmp	r3, #14
 8000e78:	ddd7      	ble.n	8000e2a <main+0x82>
  {
 8000e7a:	e7ac      	b.n	8000dd6 <main+0x2e>
 8000e7c:	f3af 8000 	nop.w
 8000e80:	00000000 	.word	0x00000000
 8000e84:	4052c000 	.word	0x4052c000
 8000e88:	200000b8 	.word	0x200000b8
 8000e8c:	20000148 	.word	0x20000148
 8000e90:	20000100 	.word	0x20000100
 8000e94:	08004554 	.word	0x08004554
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	08004590 	.word	0x08004590

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b090      	sub	sp, #64	; 0x40
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 fb0c 	bl	80044cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 feb6 	bl	8002c48 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ee2:	f000 f91b 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 f924 	bl	800314c <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 f907 	bl	800111c <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3740      	adds	r7, #64	; 0x40
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f000 fe43 	bl	8001be0 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 f8dc 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000064 	.word	0x20000064
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_TIM1_Init+0x98>)
 8000f92:	4a1f      	ldr	r2, [pc, #124]	; (8001010 <MX_TIM1_Init+0x9c>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_TIM1_Init+0x98>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_TIM1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM1_Init+0x98>)
 8000fa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM1_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_TIM1_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM1_Init+0x98>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fbc:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_TIM1_Init+0x98>)
 8000fbe:	f002 fa53 	bl	8003468 <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fc8:	f000 f8a8 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480c      	ldr	r0, [pc, #48]	; (800100c <MX_TIM1_Init+0x98>)
 8000fda:	f002 fad9 	bl	8003590 <HAL_TIM_ConfigClockSource>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fe4:	f000 f89a 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_TIM1_Init+0x98>)
 8000ff6:	f002 fc81 	bl	80038fc <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001000:	f000 f88c 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200000b8 	.word	0x200000b8
 8001010:	40012c00 	.word	0x40012c00

08001014 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <MX_USART1_UART_Init+0x50>)
 800101c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_USART1_UART_Init+0x4c>)
 800104c:	f002 fcae 	bl	80039ac <HAL_UART_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001056:	f000 f861 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000100 	.word	0x20000100
 8001064:	40013800 	.word	0x40013800

08001068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_GPIO_Init+0xa8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <MX_GPIO_Init+0xa8>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_GPIO_Init+0xa8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_GPIO_Init+0xa8>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <MX_GPIO_Init+0xa8>)
 800109a:	f043 0308 	orr.w	r3, r3, #8
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_GPIO_Init+0xa8>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_GPIO_Init+0xa8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <MX_GPIO_Init+0xa8>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_GPIO_Init+0xa8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <MX_GPIO_Init+0xac>)
 80010cc:	f000 fd57 	bl	8001b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_GPIO_Init+0xb0>)
 80010e4:	f000 fbb8 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80010e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_GPIO_Init+0xac>)
 8001102:	f000 fba9 	bl	8001858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001106:	bf00      	nop
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800
 8001118:	40010c00 	.word	0x40010c00

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	e7fe      	b.n	8001124 <Error_Handler+0x8>
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_MspInit+0x40>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_MspInit+0x40>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_MspInit+0x40>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_MspInit+0x40>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_MspInit+0x40>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_MspInit+0x40>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_I2C_MspInit+0x94>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d134      	bne.n	80011f6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_I2C_MspInit+0x98>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a1c      	ldr	r2, [pc, #112]	; (8001204 <HAL_I2C_MspInit+0x98>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_I2C_MspInit+0x98>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011aa:	2312      	movs	r3, #18
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <HAL_I2C_MspInit+0x9c>)
 80011be:	f000 fb4b 	bl	8001858 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_I2C_MspInit+0xa0>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
 80011d8:	4a0c      	ldr	r2, [pc, #48]	; (800120c <HAL_I2C_MspInit+0xa0>)
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_I2C_MspInit+0x98>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0x98>)
 80011e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_I2C_MspInit+0x98>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	; 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005400 	.word	0x40005400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010c00 	.word	0x40010c00
 800120c:	40010000 	.word	0x40010000

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_TIM_Base_MspInit+0x34>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10b      	bne.n	800123a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_TIM_Base_MspInit+0x38>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_TIM_Base_MspInit+0x38>)
 8001228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800122c:	6193      	str	r3, [r2, #24]
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_TIM_Base_MspInit+0x38>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <HAL_UART_MspInit+0xb4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d145      	bne.n	80012f8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_UART_MspInit+0xb8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a24      	ldr	r2, [pc, #144]	; (8001304 <HAL_UART_MspInit+0xb8>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <HAL_UART_MspInit+0xb8>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_UART_MspInit+0xb8>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <HAL_UART_MspInit+0xb8>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_UART_MspInit+0xb8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800129c:	2340      	movs	r3, #64	; 0x40
 800129e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <HAL_UART_MspInit+0xbc>)
 80012b0:	f000 fad2 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <HAL_UART_MspInit+0xbc>)
 80012c8:	f000 fac6 	bl	8001858 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_UART_MspInit+0xc0>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <HAL_UART_MspInit+0xc0>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2025      	movs	r0, #37	; 0x25
 80012ee:	f000 f9ca 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012f2:	2025      	movs	r0, #37	; 0x25
 80012f4:	f000 f9e3 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	3728      	adds	r7, #40	; 0x28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40013800 	.word	0x40013800
 8001304:	40021000 	.word	0x40021000
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40010000 	.word	0x40010000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001356:	f000 f87f 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <USART1_IRQHandler+0x10>)
 8001366:	f002 fb97 	bl	8003a98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000100 	.word	0x20000100

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001380:	f7ff fff8 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001386:	490c      	ldr	r1, [pc, #48]	; (80013b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800139c:	4c09      	ldr	r4, [pc, #36]	; (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f003 f897 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ae:	f7ff fcfb 	bl	8000da8 <main>
  bx lr
 80013b2:	4770      	bx	lr
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80013bc:	08004600 	.word	0x08004600
  ldr r2, =_sbss
 80013c0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80013c4:	20000150 	.word	0x20000150

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x28>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x28>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f947 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fe9e 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40022000 	.word	0x40022000

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f95f 	bl	80016da <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f927 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000003c 	.word	0x2000003c
 8001450:	20000044 	.word	0x20000044
 8001454:	20000040 	.word	0x20000040

08001458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x1c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x20>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <HAL_IncTick+0x20>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000044 	.word	0x20000044
 8001478:	2000014c 	.word	0x2000014c

0800147c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return uwTick;
 8001480:	4b02      	ldr	r3, [pc, #8]	; (800148c <HAL_GetTick+0x10>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	2000014c 	.word	0x2000014c

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff fff0 	bl	800147c <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffe0 	bl	800147c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000044 	.word	0x20000044

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <__NVIC_SetPriorityGrouping+0x44>)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	60d3      	str	r3, [r2, #12]
}
 8001510:	bf00      	nop
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	2b00      	cmp	r3, #0
 800154c:	db0b      	blt.n	8001566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 021f 	and.w	r2, r3, #31
 8001554:	4906      	ldr	r1, [pc, #24]	; (8001570 <__NVIC_EnableIRQ+0x34>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	2001      	movs	r0, #1
 800155e:	fa00 f202 	lsl.w	r2, r0, r2
 8001562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100

08001574 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	db0a      	blt.n	800159e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	490c      	ldr	r1, [pc, #48]	; (80015c0 <__NVIC_SetPriority+0x4c>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	0112      	lsls	r2, r2, #4
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	440b      	add	r3, r1
 8001598:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800159c:	e00a      	b.n	80015b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4908      	ldr	r1, [pc, #32]	; (80015c4 <__NVIC_SetPriority+0x50>)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	3b04      	subs	r3, #4
 80015ac:	0112      	lsls	r2, r2, #4
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	440b      	add	r3, r1
 80015b2:	761a      	strb	r2, [r3, #24]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f1c3 0307 	rsb	r3, r3, #7
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	bf28      	it	cs
 80015e6:	2304      	movcs	r3, #4
 80015e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	2b06      	cmp	r3, #6
 80015f0:	d902      	bls.n	80015f8 <NVIC_EncodePriority+0x30>
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3b03      	subs	r3, #3
 80015f6:	e000      	b.n	80015fa <NVIC_EncodePriority+0x32>
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43da      	mvns	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa01 f303 	lsl.w	r3, r1, r3
 800161a:	43d9      	mvns	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	4313      	orrs	r3, r2
         );
}
 8001622:	4618      	mov	r0, r3
 8001624:	3724      	adds	r7, #36	; 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff90 	bl	8001574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff2d 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff42 	bl	8001520 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff90 	bl	80015c8 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5f 	bl	8001574 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff35 	bl	800153c <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b085      	sub	sp, #20
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d008      	beq.n	800171c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2204      	movs	r2, #4
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e020      	b.n	800175e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020e 	bic.w	r2, r2, #14
 800172a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d005      	beq.n	800178c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e051      	b.n	8001830 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 020e 	bic.w	r2, r2, #14
 800179a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <HAL_DMA_Abort_IT+0xd4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d029      	beq.n	800180a <HAL_DMA_Abort_IT+0xa2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a21      	ldr	r2, [pc, #132]	; (8001840 <HAL_DMA_Abort_IT+0xd8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d022      	beq.n	8001806 <HAL_DMA_Abort_IT+0x9e>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <HAL_DMA_Abort_IT+0xdc>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01a      	beq.n	8001800 <HAL_DMA_Abort_IT+0x98>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_DMA_Abort_IT+0xe0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d012      	beq.n	80017fa <HAL_DMA_Abort_IT+0x92>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <HAL_DMA_Abort_IT+0xe4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00a      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x8c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <HAL_DMA_Abort_IT+0xe8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <HAL_DMA_Abort_IT+0x86>
 80017e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017ec:	e00e      	b.n	800180c <HAL_DMA_Abort_IT+0xa4>
 80017ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f2:	e00b      	b.n	800180c <HAL_DMA_Abort_IT+0xa4>
 80017f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f8:	e008      	b.n	800180c <HAL_DMA_Abort_IT+0xa4>
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	e005      	b.n	800180c <HAL_DMA_Abort_IT+0xa4>
 8001800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001804:	e002      	b.n	800180c <HAL_DMA_Abort_IT+0xa4>
 8001806:	2310      	movs	r3, #16
 8001808:	e000      	b.n	800180c <HAL_DMA_Abort_IT+0xa4>
 800180a:	2301      	movs	r3, #1
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_DMA_Abort_IT+0xec>)
 800180e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	4798      	blx	r3
    } 
  }
  return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40020008 	.word	0x40020008
 8001840:	4002001c 	.word	0x4002001c
 8001844:	40020030 	.word	0x40020030
 8001848:	40020044 	.word	0x40020044
 800184c:	40020058 	.word	0x40020058
 8001850:	4002006c 	.word	0x4002006c
 8001854:	40020000 	.word	0x40020000

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b08b      	sub	sp, #44	; 0x2c
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	e161      	b.n	8001b30 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800186c:	2201      	movs	r2, #1
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8150 	bne.w	8001b2a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a97      	ldr	r2, [pc, #604]	; (8001aec <HAL_GPIO_Init+0x294>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d05e      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 8001894:	4a95      	ldr	r2, [pc, #596]	; (8001aec <HAL_GPIO_Init+0x294>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d875      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 800189a:	4a95      	ldr	r2, [pc, #596]	; (8001af0 <HAL_GPIO_Init+0x298>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d058      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018a0:	4a93      	ldr	r2, [pc, #588]	; (8001af0 <HAL_GPIO_Init+0x298>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d86f      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018a6:	4a93      	ldr	r2, [pc, #588]	; (8001af4 <HAL_GPIO_Init+0x29c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d052      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018ac:	4a91      	ldr	r2, [pc, #580]	; (8001af4 <HAL_GPIO_Init+0x29c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d869      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018b2:	4a91      	ldr	r2, [pc, #580]	; (8001af8 <HAL_GPIO_Init+0x2a0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d04c      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018b8:	4a8f      	ldr	r2, [pc, #572]	; (8001af8 <HAL_GPIO_Init+0x2a0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d863      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018be:	4a8f      	ldr	r2, [pc, #572]	; (8001afc <HAL_GPIO_Init+0x2a4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d046      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
 80018c4:	4a8d      	ldr	r2, [pc, #564]	; (8001afc <HAL_GPIO_Init+0x2a4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d85d      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018ca:	2b12      	cmp	r3, #18
 80018cc:	d82a      	bhi.n	8001924 <HAL_GPIO_Init+0xcc>
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d859      	bhi.n	8001986 <HAL_GPIO_Init+0x12e>
 80018d2:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <HAL_GPIO_Init+0x80>)
 80018d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d8:	08001953 	.word	0x08001953
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800193f 	.word	0x0800193f
 80018e4:	08001981 	.word	0x08001981
 80018e8:	08001987 	.word	0x08001987
 80018ec:	08001987 	.word	0x08001987
 80018f0:	08001987 	.word	0x08001987
 80018f4:	08001987 	.word	0x08001987
 80018f8:	08001987 	.word	0x08001987
 80018fc:	08001987 	.word	0x08001987
 8001900:	08001987 	.word	0x08001987
 8001904:	08001987 	.word	0x08001987
 8001908:	08001987 	.word	0x08001987
 800190c:	08001987 	.word	0x08001987
 8001910:	08001987 	.word	0x08001987
 8001914:	08001987 	.word	0x08001987
 8001918:	08001987 	.word	0x08001987
 800191c:	08001935 	.word	0x08001935
 8001920:	08001949 	.word	0x08001949
 8001924:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <HAL_GPIO_Init+0x2a8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800192a:	e02c      	b.n	8001986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	623b      	str	r3, [r7, #32]
          break;
 8001932:	e029      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	3304      	adds	r3, #4
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	e024      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	3308      	adds	r3, #8
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e01f      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	330c      	adds	r3, #12
 800194e:	623b      	str	r3, [r7, #32]
          break;
 8001950:	e01a      	b.n	8001988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800195a:	2304      	movs	r3, #4
 800195c:	623b      	str	r3, [r7, #32]
          break;
 800195e:	e013      	b.n	8001988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001968:	2308      	movs	r3, #8
 800196a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	611a      	str	r2, [r3, #16]
          break;
 8001972:	e009      	b.n	8001988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001974:	2308      	movs	r3, #8
 8001976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	615a      	str	r2, [r3, #20]
          break;
 800197e:	e003      	b.n	8001988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x130>
          break;
 8001986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2bff      	cmp	r3, #255	; 0xff
 800198c:	d801      	bhi.n	8001992 <HAL_GPIO_Init+0x13a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	e001      	b.n	8001996 <HAL_GPIO_Init+0x13e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3304      	adds	r3, #4
 8001996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d802      	bhi.n	80019a4 <HAL_GPIO_Init+0x14c>
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x152>
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	3b08      	subs	r3, #8
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	210f      	movs	r1, #15
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	6a39      	ldr	r1, [r7, #32]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80a9 	beq.w	8001b2a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_GPIO_Init+0x2ac>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x2ac>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_GPIO_Init+0x2ac>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f0:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <HAL_GPIO_Init+0x2b0>)
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	220f      	movs	r2, #15
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <HAL_GPIO_Init+0x2b4>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_GPIO_Init+0x1e0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <HAL_GPIO_Init+0x2b8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d007      	beq.n	8001a34 <HAL_GPIO_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a3b      	ldr	r2, [pc, #236]	; (8001b14 <HAL_GPIO_Init+0x2bc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_GPIO_Init+0x1d8>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e004      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e002      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <HAL_GPIO_Init+0x1e2>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3c:	f002 0203 	and.w	r2, r2, #3
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	4093      	lsls	r3, r2
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a4a:	492f      	ldr	r1, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x2b0>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	492b      	ldr	r1, [pc, #172]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	4927      	ldr	r1, [pc, #156]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d006      	beq.n	8001a9a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4921      	ldr	r1, [pc, #132]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60cb      	str	r3, [r1, #12]
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	491d      	ldr	r1, [pc, #116]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d006      	beq.n	8001ac2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4917      	ldr	r1, [pc, #92]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	4913      	ldr	r1, [pc, #76]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01f      	beq.n	8001b1c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	490d      	ldr	r1, [pc, #52]	; (8001b18 <HAL_GPIO_Init+0x2c0>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e01f      	b.n	8001b2a <HAL_GPIO_Init+0x2d2>
 8001aea:	bf00      	nop
 8001aec:	10320000 	.word	0x10320000
 8001af0:	10310000 	.word	0x10310000
 8001af4:	10220000 	.word	0x10220000
 8001af8:	10210000 	.word	0x10210000
 8001afc:	10120000 	.word	0x10120000
 8001b00:	10110000 	.word	0x10110000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010000 	.word	0x40010000
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40011000 	.word	0x40011000
 8001b18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_GPIO_Init+0x2f4>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4909      	ldr	r1, [pc, #36]	; (8001b4c <HAL_GPIO_Init+0x2f4>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f ae96 	bne.w	800186c <HAL_GPIO_Init+0x14>
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	372c      	adds	r7, #44	; 0x2c
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40010400 	.word	0x40010400

08001b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4013      	ands	r3, r2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e001      	b.n	8001b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b8e:	787b      	ldrb	r3, [r7, #1]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b94:	887a      	ldrh	r2, [r7, #2]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	041a      	lsls	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43d9      	mvns	r1, r3
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	400b      	ands	r3, r1
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e12b      	b.n	8001e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fab0 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2224      	movs	r2, #36	; 0x24
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0201 	bic.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c44:	f001 fbca 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a81      	ldr	r2, [pc, #516]	; (8001e54 <HAL_I2C_Init+0x274>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d807      	bhi.n	8001c64 <HAL_I2C_Init+0x84>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4a80      	ldr	r2, [pc, #512]	; (8001e58 <HAL_I2C_Init+0x278>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	bf94      	ite	ls
 8001c5c:	2301      	movls	r3, #1
 8001c5e:	2300      	movhi	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e006      	b.n	8001c72 <HAL_I2C_Init+0x92>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a7d      	ldr	r2, [pc, #500]	; (8001e5c <HAL_I2C_Init+0x27c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	bf94      	ite	ls
 8001c6c:	2301      	movls	r3, #1
 8001c6e:	2300      	movhi	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0e7      	b.n	8001e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a78      	ldr	r2, [pc, #480]	; (8001e60 <HAL_I2C_Init+0x280>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	0c9b      	lsrs	r3, r3, #18
 8001c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_I2C_Init+0x274>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d802      	bhi.n	8001cb4 <HAL_I2C_Init+0xd4>
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	e009      	b.n	8001cc8 <HAL_I2C_Init+0xe8>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_I2C_Init+0x284>)
 8001cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	495c      	ldr	r1, [pc, #368]	; (8001e54 <HAL_I2C_Init+0x274>)
 8001ce4:	428b      	cmp	r3, r1
 8001ce6:	d819      	bhi.n	8001d1c <HAL_I2C_Init+0x13c>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e59      	subs	r1, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf6:	1c59      	adds	r1, r3, #1
 8001cf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00a      	beq.n	8001d18 <HAL_I2C_Init+0x138>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1e59      	subs	r1, r3, #1
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d16:	e051      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e04f      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <HAL_I2C_Init+0x168>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1e58      	subs	r0, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e012      	b.n	8001d6e <HAL_I2C_Init+0x18e>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1e58      	subs	r0, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	0099      	lsls	r1, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Init+0x196>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e022      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10e      	bne.n	8001d9c <HAL_I2C_Init+0x1bc>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1e58      	subs	r0, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	440b      	add	r3, r1
 8001d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d90:	3301      	adds	r3, #1
 8001d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d9a:	e00f      	b.n	8001dbc <HAL_I2C_Init+0x1dc>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	1e58      	subs	r0, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	0099      	lsls	r1, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	6809      	ldr	r1, [r1, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6911      	ldr	r1, [r2, #16]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	000186a0 	.word	0x000186a0
 8001e58:	001e847f 	.word	0x001e847f
 8001e5c:	003d08ff 	.word	0x003d08ff
 8001e60:	431bde83 	.word	0x431bde83
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	817b      	strh	r3, [r7, #10]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff fafe 	bl	800147c <HAL_GetTick>
 8001e80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	f040 80e0 	bne.w	8002050 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2319      	movs	r3, #25
 8001e96:	2201      	movs	r2, #1
 8001e98:	4970      	ldr	r1, [pc, #448]	; (800205c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fc9e 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0d3      	b.n	8002052 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2C_Master_Transmit+0x50>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0cc      	b.n	8002052 <HAL_I2C_Master_Transmit+0x1ea>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d007      	beq.n	8001ede <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2221      	movs	r2, #33	; 0x21
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2210      	movs	r2, #16
 8001efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	893a      	ldrh	r2, [r7, #8]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4a50      	ldr	r2, [pc, #320]	; (8002060 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	6a3a      	ldr	r2, [r7, #32]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fb08 	bl	800253c <I2C_MasterRequestWrite>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e08d      	b.n	8002052 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f4c:	e066      	b.n	800201c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fd5c 	bl	8002a10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d107      	bne.n	8001f76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_I2C_Master_Transmit+0x188>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d017      	beq.n	8001ff0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	6a39      	ldr	r1, [r7, #32]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fd53 	bl	8002aa0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00d      	beq.n	800201c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2b04      	cmp	r3, #4
 8002006:	d107      	bne.n	8002018 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002016:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e01a      	b.n	8002052 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	d194      	bne.n	8001f4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	e000      	b.n	8002052 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002050:	2302      	movs	r3, #2
  }
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	00100002 	.word	0x00100002
 8002060:	ffff0000 	.word	0xffff0000

08002064 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	817b      	strh	r3, [r7, #10]
 8002074:	4613      	mov	r3, r2
 8002076:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff f9fe 	bl	800147c <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	f040 824b 	bne.w	8002526 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2319      	movs	r3, #25
 8002096:	2201      	movs	r2, #1
 8002098:	497f      	ldr	r1, [pc, #508]	; (8002298 <HAL_I2C_Master_Receive+0x234>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fb9e 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
 80020a8:	e23e      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2C_Master_Receive+0x54>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e237      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d007      	beq.n	80020de <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2222      	movs	r2, #34	; 0x22
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2210      	movs	r2, #16
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	893a      	ldrh	r2, [r7, #8]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_I2C_Master_Receive+0x238>)
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fa8a 	bl	8002640 <I2C_MasterRequestRead>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1f8      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	2b00      	cmp	r3, #0
 800213c:	d113      	bne.n	8002166 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e1cc      	b.n	8002500 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	2b01      	cmp	r3, #1
 800216c:	d11e      	bne.n	80021ac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800217e:	b672      	cpsid	i
}
 8002180:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021a8:	b662      	cpsie	i
}
 80021aa:	e035      	b.n	8002218 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d11e      	bne.n	80021f2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021ee:	b662      	cpsie	i
}
 80021f0:	e012      	b.n	8002218 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002218:	e172      	b.n	8002500 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	2b03      	cmp	r3, #3
 8002220:	f200 811f 	bhi.w	8002462 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	2b01      	cmp	r3, #1
 800222a:	d123      	bne.n	8002274 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fc7d 	bl	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e173      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002272:	e145      	b.n	8002500 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	2b02      	cmp	r3, #2
 800227a:	d152      	bne.n	8002322 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	2200      	movs	r2, #0
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <HAL_I2C_Master_Receive+0x23c>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 faa8 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e148      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
 8002296:	bf00      	nop
 8002298:	00100002 	.word	0x00100002
 800229c:	ffff0000 	.word	0xffff0000
 80022a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022a4:	b672      	cpsid	i
}
 80022a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022ea:	b662      	cpsie	i
}
 80022ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002320:	e0ee      	b.n	8002500 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2200      	movs	r2, #0
 800232a:	4981      	ldr	r1, [pc, #516]	; (8002530 <HAL_I2C_Master_Receive+0x4cc>)
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fa55 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0f5      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002382:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <HAL_I2C_Master_Receive+0x4d0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	08db      	lsrs	r3, r3, #3
 8002388:	4a6b      	ldr	r2, [pc, #428]	; (8002538 <HAL_I2C_Master_Receive+0x4d4>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0a1a      	lsrs	r2, r3, #8
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00da      	lsls	r2, r3, #3
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	3b01      	subs	r3, #1
 80023a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d118      	bne.n	80023da <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023ca:	b662      	cpsie	i
}
 80023cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0a6      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d1d9      	bne.n	800239c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800242a:	b662      	cpsie	i
}
 800242c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002460:	e04e      	b.n	8002500 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fb62 	bl	8002b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e058      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d124      	bne.n	8002500 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d107      	bne.n	80024ce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f ae88 	bne.w	800221a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	00010004 	.word	0x00010004
 8002534:	2000003c 	.word	0x2000003c
 8002538:	14f8b589 	.word	0x14f8b589

0800253c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d006      	beq.n	8002566 <I2C_MasterRequestWrite+0x2a>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d003      	beq.n	8002566 <I2C_MasterRequestWrite+0x2a>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002564:	d108      	bne.n	8002578 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e00b      	b.n	8002590 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	2b12      	cmp	r3, #18
 800257e:	d107      	bne.n	8002590 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800258e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f91d 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00d      	beq.n	80025c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b6:	d103      	bne.n	80025c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e035      	b.n	8002630 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025cc:	d108      	bne.n	80025e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	e01b      	b.n	8002618 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025e0:	897b      	ldrh	r3, [r7, #10]
 80025e2:	11db      	asrs	r3, r3, #7
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 0306 	and.w	r3, r3, #6
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f063 030f 	orn	r3, r3, #15
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	490e      	ldr	r1, [pc, #56]	; (8002638 <I2C_MasterRequestWrite+0xfc>)
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f966 	bl	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e010      	b.n	8002630 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <I2C_MasterRequestWrite+0x100>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f956 	bl	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	00010008 	.word	0x00010008
 800263c:	00010002 	.word	0x00010002

08002640 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002664:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d006      	beq.n	800267a <I2C_MasterRequestRead+0x3a>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d003      	beq.n	800267a <I2C_MasterRequestRead+0x3a>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002678:	d108      	bne.n	800268c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e00b      	b.n	80026a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	2b11      	cmp	r3, #17
 8002692:	d107      	bne.n	80026a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f893 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	d103      	bne.n	80026d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e079      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e0:	d108      	bne.n	80026f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026e2:	897b      	ldrh	r3, [r7, #10]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]
 80026f2:	e05f      	b.n	80027b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	11db      	asrs	r3, r3, #7
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0306 	and.w	r3, r3, #6
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f063 030f 	orn	r3, r3, #15
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4930      	ldr	r1, [pc, #192]	; (80027d4 <I2C_MasterRequestRead+0x194>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f8dc 	bl	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e054      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4929      	ldr	r1, [pc, #164]	; (80027d8 <I2C_MasterRequestRead+0x198>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8cc 	bl	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e044      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002766:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f831 	bl	80027dc <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	d103      	bne.n	8002798 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e017      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800279c:	897b      	ldrh	r3, [r7, #10]
 800279e:	11db      	asrs	r3, r3, #7
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0306 	and.w	r3, r3, #6
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f063 030e 	orn	r3, r3, #14
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <I2C_MasterRequestRead+0x198>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f888 	bl	80028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	00010008 	.word	0x00010008
 80027d8:	00010002 	.word	0x00010002

080027dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ec:	e048      	b.n	8002880 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d044      	beq.n	8002880 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f6:	f7fe fe41 	bl	800147c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d302      	bcc.n	800280c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d139      	bne.n	8002880 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10d      	bne.n	8002832 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	43da      	mvns	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	e00c      	b.n	800284c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	43da      	mvns	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4013      	ands	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	461a      	mov	r2, r3
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	429a      	cmp	r2, r3
 8002850:	d116      	bne.n	8002880 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e023      	b.n	80028c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10d      	bne.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	e00c      	b.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	43da      	mvns	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4013      	ands	r3, r2
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d093      	beq.n	80027ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028de:	e071      	b.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d123      	bne.n	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002908:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e067      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d041      	beq.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002940:	f7fe fd9c 	bl	800147c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d302      	bcc.n	8002956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d136      	bne.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10c      	bne.n	800297a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4013      	ands	r3, r2
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	e00b      	b.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	43da      	mvns	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	4013      	ands	r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf14      	ite	ne
 800298c:	2301      	movne	r3, #1
 800298e:	2300      	moveq	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d016      	beq.n	80029c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2220      	movs	r2, #32
 80029a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e021      	b.n	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	0c1b      	lsrs	r3, r3, #16
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10c      	bne.n	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	e00b      	b.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4013      	ands	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f47f af6d 	bne.w	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a1c:	e034      	b.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8e3 	bl	8002bea <I2C_IsAcknowledgeFailed>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d028      	beq.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fe fd21 	bl	800147c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11d      	bne.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d016      	beq.n	8002a88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e007      	b.n	8002a98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d1c3      	bne.n	8002a1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aac:	e034      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f89b 	bl	8002bea <I2C_IsAcknowledgeFailed>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e034      	b.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d028      	beq.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac6:	f7fe fcd9 	bl	800147c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11d      	bne.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d016      	beq.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e007      	b.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d1c3      	bne.n	8002aae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b3c:	e049      	b.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d119      	bne.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0210 	mvn.w	r2, #16
 8002b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e030      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b80:	f7fe fc7c 	bl	800147c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d11d      	bne.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d016      	beq.n	8002bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0220 	orr.w	r2, r3, #32
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e007      	b.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d1ae      	bne.n	8002b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c00:	d11b      	bne.n	8002c3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0204 	orr.w	r2, r3, #4
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e272      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8087 	beq.w	8002d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c68:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c74:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d112      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5e>
 8002c80:	4b8c      	ldr	r3, [pc, #560]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d06c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x12c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d168      	bne.n	8002d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e24c      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x76>
 8002cb0:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a7f      	ldr	r2, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e02e      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0xbc>
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe fbaa 	bl	800147c <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fba6 	bl	800147c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e200      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe4>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fb96 	bl	800147c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fb92 	bl	800147c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1ec      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x10c>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d82:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x176>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c0      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4939      	ldr	r1, [pc, #228]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x270>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fb4b 	bl	800147c <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7fe fb47 	bl	800147c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a1      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x270>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fb2a 	bl	800147c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fb26 	bl	800147c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e180      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03a      	beq.n	8002ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d019      	beq.n	8002e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fb0a 	bl	800147c <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fb06 	bl	800147c <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e160      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f000 face 	bl	800342c <RCC_Delay>
 8002e90:	e01c      	b.n	8002ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe faf0 	bl	800147c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7fe faec 	bl	800147c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e146      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	42420000 	.word	0x42420000
 8002ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec0:	4b92      	ldr	r3, [pc, #584]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e9      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a6 	beq.w	8003026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a87      	ldr	r2, [pc, #540]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b7f      	ldr	r3, [pc, #508]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7e      	ldr	r2, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe faad 	bl	800147c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe faa9 	bl	800147c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e103      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x312>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x334>
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6213      	str	r3, [r2, #32]
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a66      	ldr	r2, [pc, #408]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x356>
 8002f84:	4b61      	ldr	r3, [pc, #388]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a60      	ldr	r2, [pc, #384]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6213      	str	r3, [r2, #32]
 8002f90:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a5d      	ldr	r2, [pc, #372]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fa5d 	bl	800147c <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fa59 	bl	800147c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0b1      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x37e>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fa47 	bl	800147c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fa43 	bl	800147c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e09b      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b3c      	ldr	r3, [pc, #240]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8087 	beq.w	800313e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d061      	beq.n	8003100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d146      	bne.n	80030d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fe fa17 	bl	800147c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fe fa13 	bl	800147c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e06d      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d108      	bne.n	800308c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4921      	ldr	r1, [pc, #132]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a19      	ldr	r1, [r3, #32]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	430b      	orrs	r3, r1
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe f9e7 	bl	800147c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe f9e3 	bl	800147c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x46a>
 80030d0:	e035      	b.n	800313e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f9d0 	bl	800147c <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe f9cc 	bl	800147c <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e026      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x498>
 80030fe:	e01e      	b.n	800313e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e019      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
 8003114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x500>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0d0      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4965      	ldr	r1, [pc, #404]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b8      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a8:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	494d      	ldr	r1, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d040      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d115      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e073      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4936      	ldr	r1, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe f91e 	bl	800147c <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7fe f91a 	bl	800147c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e053      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d210      	bcs.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4922      	ldr	r1, [pc, #136]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e032      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032da:	f000 f821 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032de:	4602      	mov	r2, r0
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	490a      	ldr	r1, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1cc>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe f87c 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000
 8003310:	40021000 	.word	0x40021000
 8003314:	080045cc 	.word	0x080045cc
 8003318:	2000003c 	.word	0x2000003c
 800331c:	20000040 	.word	0x20000040

08003320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800333a:	4b1e      	ldr	r3, [pc, #120]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b04      	cmp	r3, #4
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x30>
 800334a:	2b08      	cmp	r3, #8
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x36>
 800334e:	e027      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003352:	613b      	str	r3, [r7, #16]
      break;
 8003354:	e027      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003360:	5cd3      	ldrb	r3, [r2, r3]
 8003362:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d010      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0c5b      	lsrs	r3, r3, #17
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	4a11      	ldr	r2, [pc, #68]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003382:	fb03 f202 	mul.w	r2, r3, r2
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	e004      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	613b      	str	r3, [r7, #16]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80033a2:	613b      	str	r3, [r7, #16]
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	693b      	ldr	r3, [r7, #16]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	007a1200 	.word	0x007a1200
 80033bc:	080045e4 	.word	0x080045e4
 80033c0:	080045f4 	.word	0x080045f4
 80033c4:	003d0900 	.word	0x003d0900

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	2000003c 	.word	0x2000003c

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e0:	f7ff fff2 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	080045dc 	.word	0x080045dc

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003408:	f7ff ffde 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0adb      	lsrs	r3, r3, #11
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	080045dc 	.word	0x080045dc

0800342c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <RCC_Delay+0x34>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <RCC_Delay+0x38>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0a5b      	lsrs	r3, r3, #9
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003448:	bf00      	nop
  }
  while (Delay --);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	60fa      	str	r2, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f9      	bne.n	8003448 <RCC_Delay+0x1c>
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	2000003c 	.word	0x2000003c
 8003464:	10624dd3 	.word	0x10624dd3

08003468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e041      	b.n	80034fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d106      	bne.n	8003494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd febe 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	4619      	mov	r1, r3
 80034a6:	4610      	mov	r0, r2
 80034a8:	f000 f93a 	bl	8003720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b01      	cmp	r3, #1
 800351a:	d001      	beq.n	8003520 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e02d      	b.n	800357c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_TIM_Base_Start+0x80>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_TIM_Base_Start+0x3e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d004      	beq.n	8003546 <HAL_TIM_Base_Start+0x3e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a12      	ldr	r2, [pc, #72]	; (800358c <HAL_TIM_Base_Start+0x84>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d111      	bne.n	800356a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d010      	beq.n	800357a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003568:	e007      	b.n	800357a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40000400 	.word	0x40000400

08003590 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIM_ConfigClockSource+0x1c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0b4      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x186>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e4:	d03e      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0xd4>
 80035e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ea:	f200 8087 	bhi.w	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f2:	f000 8086 	beq.w	8003702 <HAL_TIM_ConfigClockSource+0x172>
 80035f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fa:	d87f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b70      	cmp	r3, #112	; 0x70
 80035fe:	d01a      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xa6>
 8003600:	2b70      	cmp	r3, #112	; 0x70
 8003602:	d87b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b60      	cmp	r3, #96	; 0x60
 8003606:	d050      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x11a>
 8003608:	2b60      	cmp	r3, #96	; 0x60
 800360a:	d877      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b50      	cmp	r3, #80	; 0x50
 800360e:	d03c      	beq.n	800368a <HAL_TIM_ConfigClockSource+0xfa>
 8003610:	2b50      	cmp	r3, #80	; 0x50
 8003612:	d873      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d058      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x13a>
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d86f      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b30      	cmp	r3, #48	; 0x30
 800361e:	d064      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b30      	cmp	r3, #48	; 0x30
 8003622:	d86b      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b20      	cmp	r3, #32
 8003626:	d060      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b20      	cmp	r3, #32
 800362a:	d867      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	2b10      	cmp	r3, #16
 8003632:	d05a      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	e062      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	f000 f93a 	bl	80038be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	609a      	str	r2, [r3, #8]
      break;
 8003662:	e04f      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	f000 f923 	bl	80038be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003686:	609a      	str	r2, [r3, #8]
      break;
 8003688:	e03c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	461a      	mov	r2, r3
 8003698:	f000 f89a 	bl	80037d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2150      	movs	r1, #80	; 0x50
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f8f1 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 80036a8:	e02c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b6:	461a      	mov	r2, r3
 80036b8:	f000 f8b8 	bl	800382c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2160      	movs	r1, #96	; 0x60
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f8e1 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 80036c8:	e01c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	461a      	mov	r2, r3
 80036d8:	f000 f87a 	bl	80037d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2140      	movs	r1, #64	; 0x40
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8d1 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 80036e8:	e00c      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f000 f8c8 	bl	800388a <TIM_ITRx_SetConfig>
      break;
 80036fa:	e003      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	e000      	b.n	8003704 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xa8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x28>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x28>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a22      	ldr	r2, [pc, #136]	; (80037cc <TIM_Base_SetConfig+0xac>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1a      	ldr	r2, [pc, #104]	; (80037c8 <TIM_Base_SetConfig+0xa8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <TIM_Base_SetConfig+0x52>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d003      	beq.n	8003772 <TIM_Base_SetConfig+0x52>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a17      	ldr	r2, [pc, #92]	; (80037cc <TIM_Base_SetConfig+0xac>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d108      	bne.n	8003784 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <TIM_Base_SetConfig+0xa8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d103      	bne.n	80037b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	615a      	str	r2, [r3, #20]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400

080037d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0201 	bic.w	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 030a 	bic.w	r3, r3, #10
 800380c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0210 	bic.w	r2, r3, #16
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	031b      	lsls	r3, r3, #12
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003868:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f043 0307 	orr.w	r3, r3, #7
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038be:	b480      	push	{r7}
 80038c0:	b087      	sub	sp, #28
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	021a      	lsls	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	609a      	str	r2, [r3, #8]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003910:	2302      	movs	r3, #2
 8003912:	e041      	b.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a14      	ldr	r2, [pc, #80]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003960:	d004      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10c      	bne.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400

080039ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e042      	b.n	8003a44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fc3a 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2224      	movs	r2, #36	; 0x24
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fcdd 	bl	80043b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d112      	bne.n	8003a8c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_UART_Receive_IT+0x26>
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e00b      	b.n	8003a8e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fac0 	bl	8004008 <UART_Start_Receive_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b0ba      	sub	sp, #232	; 0xe8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_UART_IRQHandler+0x66>
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fb9c 	bl	8004234 <UART_Receive_IT>
      return;
 8003afc:	e25b      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80de 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x22c>
 8003b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80d1 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_UART_IRQHandler+0xae>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00b      	beq.n	8003b6a <HAL_UART_IRQHandler+0xd2>
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0202 	orr.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_UART_IRQHandler+0xf6>
 8003b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f043 0204 	orr.w	r2, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d011      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
 8003b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d105      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f043 0208 	orr.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 81f2 	beq.w	8003fac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_UART_IRQHandler+0x14e>
 8003bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb27 	bl	8004234 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_UART_IRQHandler+0x17a>
 8003c0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d04f      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa31 	bl	800407a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d041      	beq.n	8003caa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1d9      	bne.n	8003c26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d013      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	4a7e      	ldr	r2, [pc, #504]	; (8003e78 <HAL_UART_IRQHandler+0x3e0>)
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd fd6e 	bl	8001768 <HAL_DMA_Abort_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d016      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	e00e      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f99c 	bl	8003fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00a      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f998 	bl	8003fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e006      	b.n	8003cc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f994 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003cbe:	e175      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc0:	bf00      	nop
    return;
 8003cc2:	e173      	b.n	8003fac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 814f 	bne.w	8003f6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8148 	beq.w	8003f6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8141 	beq.w	8003f6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80b6 	beq.w	8003e7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8145 	beq.w	8003fb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	f080 813e 	bcs.w	8003fb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	f000 8088 	beq.w	8003e58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1d9      	bne.n	8003d48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003da4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003db8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e1      	bne.n	8003d94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003df4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003df6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	f023 0310 	bic.w	r3, r3, #16
 8003e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e3      	bne.n	8003e16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fd fc4d 	bl	80016f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8bf 	bl	8003ff2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e74:	e09c      	b.n	8003fb0 <HAL_UART_IRQHandler+0x518>
 8003e76:	bf00      	nop
 8003e78:	0800413f 	.word	0x0800413f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 808e 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8089 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e3      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003efe:	633a      	str	r2, [r7, #48]	; 0x30
 8003f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0310 	bic.w	r3, r3, #16
 8003f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	330c      	adds	r3, #12
 8003f40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f44:	61fa      	str	r2, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	69b9      	ldr	r1, [r7, #24]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	617b      	str	r3, [r7, #20]
   return(result);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e3      	bne.n	8003f20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f62:	4619      	mov	r1, r3
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f844 	bl	8003ff2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f6a:	e023      	b.n	8003fb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d009      	beq.n	8003f8c <HAL_UART_IRQHandler+0x4f4>
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f8ee 	bl	8004166 <UART_Transmit_IT>
    return;
 8003f8a:	e014      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00e      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f92d 	bl	8004204 <UART_EndTransmit_IT>
    return;
 8003faa:	e004      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb4:	bf00      	nop
  }
}
 8003fb6:	37e8      	adds	r7, #232	; 0xe8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	88fa      	ldrh	r2, [r7, #6]
 8004020:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2222      	movs	r2, #34	; 0x22
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0220 	orr.w	r2, r2, #32
 800406c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407a:	b480      	push	{r7}
 800407c:	b095      	sub	sp, #84	; 0x54
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004098:	64fb      	str	r3, [r7, #76]	; 0x4c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	330c      	adds	r3, #12
 80040a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040a2:	643a      	str	r2, [r7, #64]	; 0x40
 80040a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e5      	bne.n	8004082 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3314      	adds	r3, #20
 80040bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e5      	bne.n	80040b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d119      	bne.n	8004126 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	e853 3f00 	ldrex	r3, [r3]
 8004100:	60bb      	str	r3, [r7, #8]
   return(result);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f023 0310 	bic.w	r3, r3, #16
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004112:	61ba      	str	r2, [r7, #24]
 8004114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004116:	6979      	ldr	r1, [r7, #20]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e5      	bne.n	80040f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004134:	bf00      	nop
 8004136:	3754      	adds	r7, #84	; 0x54
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff ff41 	bl	8003fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800415e:	bf00      	nop
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b21      	cmp	r3, #33	; 0x21
 8004178:	d13e      	bne.n	80041f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d114      	bne.n	80041ae <UART_Transmit_IT+0x48>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d110      	bne.n	80041ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	1c9a      	adds	r2, r3, #2
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	621a      	str	r2, [r3, #32]
 80041ac:	e008      	b.n	80041c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6211      	str	r1, [r2, #32]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4619      	mov	r1, r3
 80041ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10f      	bne.n	80041f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	e000      	b.n	80041fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80041f8:	2302      	movs	r3, #2
  }
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fec9 	bl	8003fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08c      	sub	sp, #48	; 0x30
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b22      	cmp	r3, #34	; 0x22
 8004246:	f040 80ae 	bne.w	80043a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004252:	d117      	bne.n	8004284 <UART_Receive_IT+0x50>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d113      	bne.n	8004284 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004272:	b29a      	uxth	r2, r3
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
 8004282:	e026      	b.n	80042d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d007      	beq.n	80042a8 <UART_Receive_IT+0x74>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <UART_Receive_IT+0x82>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	e008      	b.n	80042c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4619      	mov	r1, r3
 80042e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d15d      	bne.n	80043a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0220 	bic.w	r2, r2, #32
 80042f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2220      	movs	r2, #32
 800431a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	2b01      	cmp	r3, #1
 800432a:	d135      	bne.n	8004398 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	330c      	adds	r3, #12
 8004338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	613b      	str	r3, [r7, #16]
   return(result);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f023 0310 	bic.w	r3, r3, #16
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	623a      	str	r2, [r7, #32]
 8004354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	69f9      	ldr	r1, [r7, #28]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d10a      	bne.n	800438a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fe2e 	bl	8003ff2 <HAL_UARTEx_RxEventCallback>
 8004396:	e002      	b.n	800439e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fe18 	bl	8003fce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e002      	b.n	80043a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e000      	b.n	80043a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043a6:	2302      	movs	r3, #2
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3730      	adds	r7, #48	; 0x30
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043ea:	f023 030c 	bic.w	r3, r3, #12
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	68b9      	ldr	r1, [r7, #8]
 80043f4:	430b      	orrs	r3, r1
 80043f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2c      	ldr	r2, [pc, #176]	; (80044c4 <UART_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004418:	f7fe fff4 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	e002      	b.n	8004426 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004420:	f7fe ffdc 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004424:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009a      	lsls	r2, r3, #2
 8004430:	441a      	add	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fbb2 f3f3 	udiv	r3, r2, r3
 800443c:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <UART_SetConfig+0x118>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	095b      	lsrs	r3, r3, #5
 8004444:	0119      	lsls	r1, r3, #4
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009a      	lsls	r2, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	fbb2 f2f3 	udiv	r2, r2, r3
 800445c:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <UART_SetConfig+0x118>)
 800445e:	fba3 0302 	umull	r0, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	2064      	movs	r0, #100	; 0x64
 8004466:	fb00 f303 	mul.w	r3, r0, r3
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	3332      	adds	r3, #50	; 0x32
 8004470:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <UART_SetConfig+0x118>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447c:	4419      	add	r1, r3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <UART_SetConfig+0x118>)
 8004496:	fba3 0302 	umull	r0, r3, r3, r2
 800449a:	095b      	lsrs	r3, r3, #5
 800449c:	2064      	movs	r0, #100	; 0x64
 800449e:	fb00 f303 	mul.w	r3, r0, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	3332      	adds	r3, #50	; 0x32
 80044a8:	4a07      	ldr	r2, [pc, #28]	; (80044c8 <UART_SetConfig+0x118>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	440a      	add	r2, r1
 80044ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044bc:	bf00      	nop
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40013800 	.word	0x40013800
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <memset>:
 80044cc:	4603      	mov	r3, r0
 80044ce:	4402      	add	r2, r0
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d100      	bne.n	80044d6 <memset+0xa>
 80044d4:	4770      	bx	lr
 80044d6:	f803 1b01 	strb.w	r1, [r3], #1
 80044da:	e7f9      	b.n	80044d0 <memset+0x4>

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	2600      	movs	r6, #0
 80044e0:	4d0c      	ldr	r5, [pc, #48]	; (8004514 <__libc_init_array+0x38>)
 80044e2:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e4:	1b64      	subs	r4, r4, r5
 80044e6:	10a4      	asrs	r4, r4, #2
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	f000 f81a 	bl	8004524 <_init>
 80044f0:	2600      	movs	r6, #0
 80044f2:	4d0a      	ldr	r5, [pc, #40]	; (800451c <__libc_init_array+0x40>)
 80044f4:	4c0a      	ldr	r4, [pc, #40]	; (8004520 <__libc_init_array+0x44>)
 80044f6:	1b64      	subs	r4, r4, r5
 80044f8:	10a4      	asrs	r4, r4, #2
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	080045f8 	.word	0x080045f8
 8004518:	080045f8 	.word	0x080045f8
 800451c:	080045f8 	.word	0x080045f8
 8004520:	080045fc 	.word	0x080045fc

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
